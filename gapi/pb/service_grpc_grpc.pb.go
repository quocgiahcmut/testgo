// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.1
// source: service_grpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestGrpc_CreatePerson_FullMethodName  = "/pb.TestGrpc/CreatePerson"
	TestGrpc_GetListPerson_FullMethodName = "/pb.TestGrpc/GetListPerson"
)

// TestGrpcClient is the client API for TestGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestGrpcClient interface {
	CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*CreatePersonResponse, error)
	GetListPerson(ctx context.Context, in *GetListPersonReq, opts ...grpc.CallOption) (*GetListPersonRes, error)
}

type testGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTestGrpcClient(cc grpc.ClientConnInterface) TestGrpcClient {
	return &testGrpcClient{cc}
}

func (c *testGrpcClient) CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*CreatePersonResponse, error) {
	out := new(CreatePersonResponse)
	err := c.cc.Invoke(ctx, TestGrpc_CreatePerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testGrpcClient) GetListPerson(ctx context.Context, in *GetListPersonReq, opts ...grpc.CallOption) (*GetListPersonRes, error) {
	out := new(GetListPersonRes)
	err := c.cc.Invoke(ctx, TestGrpc_GetListPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestGrpcServer is the server API for TestGrpc service.
// All implementations must embed UnimplementedTestGrpcServer
// for forward compatibility
type TestGrpcServer interface {
	CreatePerson(context.Context, *CreatePersonRequest) (*CreatePersonResponse, error)
	GetListPerson(context.Context, *GetListPersonReq) (*GetListPersonRes, error)
	mustEmbedUnimplementedTestGrpcServer()
}

// UnimplementedTestGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedTestGrpcServer struct {
}

func (UnimplementedTestGrpcServer) CreatePerson(context.Context, *CreatePersonRequest) (*CreatePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerson not implemented")
}
func (UnimplementedTestGrpcServer) GetListPerson(context.Context, *GetListPersonReq) (*GetListPersonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPerson not implemented")
}
func (UnimplementedTestGrpcServer) mustEmbedUnimplementedTestGrpcServer() {}

// UnsafeTestGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestGrpcServer will
// result in compilation errors.
type UnsafeTestGrpcServer interface {
	mustEmbedUnimplementedTestGrpcServer()
}

func RegisterTestGrpcServer(s grpc.ServiceRegistrar, srv TestGrpcServer) {
	s.RegisterService(&TestGrpc_ServiceDesc, srv)
}

func _TestGrpc_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestGrpcServer).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestGrpc_CreatePerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestGrpcServer).CreatePerson(ctx, req.(*CreatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestGrpc_GetListPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListPersonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestGrpcServer).GetListPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestGrpc_GetListPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestGrpcServer).GetListPerson(ctx, req.(*GetListPersonReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TestGrpc_ServiceDesc is the grpc.ServiceDesc for TestGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TestGrpc",
	HandlerType: (*TestGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePerson",
			Handler:    _TestGrpc_CreatePerson_Handler,
		},
		{
			MethodName: "GetListPerson",
			Handler:    _TestGrpc_GetListPerson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_grpc.proto",
}
